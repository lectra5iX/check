'use strict';

function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const react = require('react');
const address = require('../core/address.js');
const useName = require('../hooks/useName.js');
const jsxRuntime = require('react/jsx-runtime');

/**
 * Name is a React component that renders the user name from an Ethereum address.
 * It displays the ENS name if available; otherwise, it shows either a sliced version of the address
 * or the full address, based on the 'sliced' prop. By default, 'sliced' is set to true.
 *
 * @param {Address} address - Ethereum address to be displayed.
 * @param {string} [className] - Optional CSS class for custom styling.
 * @param {boolean} [sliced=true] - Determines if the address should be sliced when no ENS name is available.
 * @param {React.HTMLAttributes<HTMLSpanElement>} [props] - Additional HTML attributes for the span element.
 */
function Name({
  address: address$1,
  className,
  sliced = true,
  props
}) {
  const _useName$useName = useName.useName(address$1),
    ensName = _useName$useName.ensName,
    isLoading = _useName$useName.isLoading;

  // wrapped in useMemo to prevent unnecessary recalculations.
  const normalizedAddress = react.useMemo(() => {
    if (!ensName && !isLoading && sliced) {
      return address.getSlicedAddress(address$1);
    }
    return address$1;
  }, [address$1, isLoading]);
  if (isLoading) {
    return null;
  }
  return /*#__PURE__*/jsxRuntime.jsx("span", _objectSpread(_objectSpread({
    className: className
  }, props), {}, {
    children: ensName ?? normalizedAddress
  }));
}
exports.Name = Name;
//# sourceMappingURL=Name.js.map
