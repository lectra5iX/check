function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useState, useEffect } from 'react';
import { InMemoryStorage } from '../store/inMemoryStorageService.js';

/**
 * A generic hook to fetch and store data using a specified storage service.
 * It fetches data based on the given dependencies and stores it using the provided storage service.
 * @param action - The action function to fetch data.
 * @param actionKey - A key associated with the action for caching purposes.
 * @returns The data fetched by the action function and a boolean indicating whether the data is being fetched.
 */
function useOnchainActionWithCache(action, actionKey) {
  const _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    data = _useState2[0],
    setData = _useState2[1];
  const _useState3 = useState(true),
    _useState4 = _slicedToArray(_useState3, 2),
    isLoading = _useState4[0],
    setIsLoading = _useState4[1];
  useEffect(() => {
    let isSubscribed = true;
    const callAction = async () => {
      let fetchedData;
      // Use cache only if actionKey is not empty
      if (actionKey) {
        fetchedData = await InMemoryStorage.getData(actionKey);
      }

      // If no cached data or actionKey is empty, fetch new data
      if (!fetchedData) {
        fetchedData = await action();
        // Cache the data only if actionKey is not empty
        if (actionKey) {
          await InMemoryStorage.setData(actionKey, fetchedData);
        }
      }
      if (isSubscribed) {
        setData(fetchedData);
        setIsLoading(false);
      }
    };
    void callAction();
    return () => {
      isSubscribed = false;
    };
  }, [actionKey, action]);
  return {
    data,
    isLoading
  };
}
export { useOnchainActionWithCache };
//# sourceMappingURL=useOnchainActionWithCache.js.map
