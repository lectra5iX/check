function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { useAvatar } from '../hooks/useAvatar.js';
import { useName } from '../hooks/useName.js';
import { jsx } from 'react/jsx-runtime';

/**
 * Represents an Avatar component that displays either a loading indicator, a default avatar, or a custom avatar based on Ethereum Name Service (ENS).
 *
 * The component first attempts to retrieve the ENS name and avatar for the given Ethereum address. If the data is still loading, it displays a loading SVG.
 * If the ENS name or avatar is not available, it shows a default SVG avatar. Otherwise, it displays the custom avatar obtained from ENS.
 *
 * @param {Address} props.address - The Ethereum address for which to display the avatar.
 * @param {string} [props.className] - Optional additional CSS class to apply to the avatar.
 * @param {JSX.Element} [props.loadingComponent] - Optional custom component to display while the avatar data is loading.
 * @param {JSX.Element} [props.defaultComponent] - Optional custom component to display when no ENS name or avatar is available.
 * @param {React.ImgHTMLAttributes<HTMLImageElement>} [props.props] - Optional additional image attributes to apply to the avatar.
 * @returns {JSX.Element} The JSX element representing the avatar, which could be a loading SVG, a default SVG, or an image.
 */
function Avatar({
  address,
  className,
  loadingComponent,
  defaultComponent,
  props
}) {
  const _useName = useName(address),
    ensName = _useName.ensName,
    isLoadingName = _useName.isLoading;
  const _useAvatar = useAvatar(ensName),
    ensAvatar = _useAvatar.ensAvatar,
    isLoadingAvatar = _useAvatar.isLoading;
  if (isLoadingName || isLoadingAvatar) {
    return loadingComponent || /*#__PURE__*/jsx("svg", {
      "data-testid": "avatar-loading-svg",
      width: "32",
      height: "32",
      viewBox: "0 0 100 100",
      xmlns: "http://www.w3.org/2000/svg",
      children: /*#__PURE__*/jsx("circle", {
        cx: "50",
        cy: "50",
        r: "45",
        stroke: "#333",
        fill: "none",
        strokeWidth: "10",
        strokeLinecap: "round",
        children: /*#__PURE__*/jsx("animateTransform", {
          attributeName: "transform",
          type: "rotate",
          from: "0 50 50",
          to: "360 50 50",
          dur: "1s",
          repeatCount: "indefinite"
        })
      })
    });
  }
  if (!ensName || !ensAvatar) {
    return defaultComponent || /*#__PURE__*/jsx("svg", {
      "data-testid": "avatar-default-svg",
      xmlns: "http://www.w3.org/2000/svg",
      height: "32",
      width: "32",
      children: /*#__PURE__*/jsx("circle", {
        fill: "blue",
        cx: "16",
        cy: "16",
        r: "16"
      })
    });
  }
  return /*#__PURE__*/jsx("img", _objectSpread({
    className: className,
    loading: "lazy",
    width: "32",
    height: "32",
    decoding: "async",
    src: ensAvatar,
    alt: ensName
  }, props));
}
export { Avatar };
//# sourceMappingURL=Avatar.js.map
